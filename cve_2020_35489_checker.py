import argparse
import asyncio
import os
import aiohttp
from packaging import version


def detecta_versao_plugin(texto_readme):
    inicio_tag = "Stable tag:"
    indice_inicio_versao = texto_readme.find(inicio_tag)

    if indice_inicio_versao != -1:
        indice_fim_versao = texto_readme.find("\n", indice_inicio_versao)

        if indice_fim_versao != -1:
            versao_detectada = texto_readme[indice_inicio_versao + len(inicio_tag):indice_fim_versao].split()[0]
            return versao_detectada

    return None


async def verifica_site(cliente_http_sessao, dominio, arquivo_saida=''):
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:89.0) Gecko/20100101 Firefox/89.0"
    }
    url_readme_plugin = f'https://{dominio}/wp-content/plugins/contact-form-7/readme.txt'

    try:
        async with cliente_http_sessao.get(url_readme_plugin, headers=headers, timeout=3.0, ssl=False) as resposta_http:
            if resposta_http.status == 200:
                try:
                    versao_detectada = detecta_versao_plugin(await resposta_http.text())
                except Exception as e:
                    print(f"\nSite: {dominio}\nOcorreu um erro ao obter a versão do plugin:\n{type(e).__name__}: {str(e)}")
                    return

                is_vulnerable = version.parse(versao_detectada) < version.parse("5.3.2")
                print(f"\nSite: {dominio}\nVersão do Plugin \"Contact Form 7\": {versao_detectada}")
                print(f"{dominio} {'-----------------------------------------------------------> ' if is_vulnerable else 'Não '}é vulnerável!\n")
                if arquivo_saida and is_vulnerable:
                    with open(arquivo_saida, "a") as f:
                        f.write(f"{dominio}\n")
            else:
                print(f"\nSite: {dominio}\nFalha na requisição HTTP ao tentar obter a versão do plugin:\nStatus code: {resposta_http.status}")
    except asyncio.TimeoutError:
        print(f"\nSite: {dominio}\nFalha: A solicitação para obter a versão do plugin excedeu o tempo limite. (3 segundos para \"timeout\")\n")
    except Exception as e:
        print(f"\nSite: {dominio}\nOcorreu um erro ao obter a versão do plugin:\n{str(e)}\n")


async def main():
    parser = argparse.ArgumentParser(
        description='Verifica se um site é vulnerável à CVE-2020-35489.'
    )
    parser.add_argument('-d', '--domain', help='Verificar um único site (Exemplo: python cve_2020_35489_checker.py -d exemplo.com)')
    parser.add_argument('-i', '--input-file', help='Verificar vários sites de um arquivo de texto (Exemplo: python cve_2020_35489_checker.py -i lista.txt -o vulneraveis.txt)')
    parser.add_argument('-o', '--output-file', help='Arquivo de saída para a lista de sites vulneráveis')
    args = parser.parse_args()

    if args.output_file and not os.path.exists(args.output_file):
        open(args.output_file, 'w').close()

    if args.input_file:
        if not os.path.exists(args.input_file):
            open(args.input_file, 'w').close()
            print(f"Arquivo de entrada '{args.input_file}' criado, mas está vazio. Por favor, preencha-o com uma lista de sites para testar.")
        else:
            async with aiohttp.ClientSession() as session:
                with open(args.input_file, 'r') as f:
                    tasks = [
                        verifica_site(session, line.strip().split(':')[0], args.output_file)
                        for line in f if line.strip()
                    ]
                    await asyncio.gather(*tasks)
    elif args.domain:
        async with aiohttp.ClientSession() as session:
            await verifica_site(session, args.domain, args.output_file)
    else:
        parser.print_help()


if __name__ == "__main__":
    asyncio.run(main())
